%%*******************************************************************************************************************************
\def\baselinestretch{1.66}
%%*******************************************************************************************************************************
%\pagestyle{fancyplain}
%********************************************************************************************************************************
\chapter{多入多出多分辨率控制器设计}
%%*******************************************************************************************************************************
\fancyhf{}  %清除以前对页眉页脚的设置
\fancyhead[CE]{\color{black}\xiaowuhao\CJKfamily{kai}吉林大学硕士学位论文} \fancyfoot[LE]{\thepage}    % 在book 文件类别下,
\fancyhead[CO]{\color{black}\xiaowuhao\CJKfamily{kai}\leftmark} \fancyfoot[RO]{\thepage}     % \leftmark 自动存录各章之章名,
%********************************************************************************************************************************
\setlength{\abovedisplayskip}{2pt plus5pt minus1pt}     %公式前的距离
\setlength{\belowdisplayskip}{2pt plus5pt minus1pt}
%%*******************************************************************************************************************************
%上章介绍了线性无约束预测控制器的多分辨率控制器的设计，由于无约束控制器的算法推导最终形式类似一个比例控制器，故其主体思想和PID控制器类似，针对需要处理的信息进行小波多分辨率（尺度）分解，然后进行相应的处理，从而达到滤波和多分辨率处理的效果。但是其本质都是从系统信号流上对系统进行分析处理，原系统层面上并未得到多大的改进。上章介绍了多分辨率~PID~控制器的设计，从结构上来看，其只是对输出信号进行处理，并未对系统本身内部的数据流如状态量，输出量等作处理，而且由于其是按照~PID~控制算法这也是但是其本质都是从系统信号流上对系统进行分析处理，原系统层面上并未得到多大的改进。

上章利用小波变换的多分辨率特性针对单输入单输出系统设计出一个类似~PID~控制器的多分辨率PID 控制器。而到了多输入多输出（Multiple-Input Multiple-Output,MIMO）系统中，一般一个输入信号的变化会引起多个输出量随之发送变化，而且每个输出量也不一定只由一个输入量控制，故多输入多输出系统一般内部结构比较复杂，各个变量之间存在耦合，如果想把~PID~控制算法运用到多输入多输出系统中，就需要就系统进行解耦，文\cite{zhang2000MIMOPID} 基于神经网络的~PID~ 控制，提出了一种可用于有耦合的多输入多输出系统的比例、积分和微分参数在线自整定的神经网络~PID~解耦控制器，其可以实现对多变量系统的解耦控制，取得很好的控制效果，但在大多数情况下，解耦过程是复杂且繁杂的且解耦后系统模型的精度也会受原系统模型精度的影响，如果解耦模型不够准确，也会影响到最终系统的控制效果~\textsuperscript{\cite{Lixu2003}}，故需要针对多输入多输出系统，需要采用更先进的控制算法。

模型预测控制(Model Predictive Control, MPC)是近几年来被广泛讨论的一种先进控制算法，其可以很好的处理多变量、多输入、多输出系统。图~\ref{fig3:1:MPC}~展示其算法原理，MPC~可以根据当前时刻测量的系统信息，然后利用系统的状态方程预测出系统未来时刻的状态和输出等信息，然后根据系统的控制目标在线求解出系统的开环最优控制序列，并将求解出的开环控制序列中的第一个元素应用到系统中以此更新系统的信息；在下一个采样时刻，重复上述过程，用新的测量值刷新优化问题求解新的控制序列，由此往复完成系统的最优控制~\textsuperscript{\cite{nl:chen_h13a}}。当然，预测控制还有一个突出的优点，其能针对实际中系统存在的各种各样的约束进行处理，其在线求解的优化问题就能包含各种不等式和等式约束，然后就可以通过相应的高等数学工具，来处理系统的各种约束，最终得到良好的控制效果。
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch4/MPC_theory.eps}
\caption{预测控制原理图} \label{fig3:1:MPC}
\end{figure}


自从麻省理工大学的~A.s.Willskyl教授、法国数学家~A. Benvesite和~R.Nikoukhah在上个世纪~90 年代的第~29 届~IEEE~控制与决策会议上首先提出了多尺度系统理论~\textsuperscript{\cite{benveniste1994multiscale}}，经过十几年的发展，基于小波分析的多尺度系统理论获得不少的研究成果，并取得广泛的应用。文献\cite{Regelesubmittedto}针对双曲型守恒方程的求解过程复杂以及运算量大等问题，提出利用多尺度建模中小波的局部特性，使用小波系数构建一个离散定位函数，然后利用该定位函数完成方程的求解，最终通过仿真实例，验证了此方法的鲁棒性和简洁性，大大缩小了运算量。文献\cite{Alam2015A}将多尺度建模应用到地球科学中的热质转移领域中，其通过建立关于~$CO_2$~ 在地质层的转换与质量转移的关系的多尺度模型，从而获得更为丰富的系统信息，最终通过实验表明该基于时间和尺度的模型能更有效率地解决~$CO_2$~在地质中迁移与地质质量问题。而文献\cite{hong1993multiresolutional}建立了一种多尺度目标跟踪框架，其核心是对数据和系统进行多尺度分解，其并没有提出新的跟踪算法，只是利用小波变换建立多尺度模型，然后利用多尺度模型的并行结构特性进行不同尺度（分辨率）控制，最终融合各个尺度得到最终的控制量，通过实验表明，该方法有鲁棒性好，计算量低等特点。

而~MPC~控制器最近几年越来越受到大家重视，正是因为其能很好地处理带约束条件的系统，而实际系统一般会广泛存在各种约束，如执行器的饱和约束，一些系统物理条件上的约束等，这些约束都体现在系统控制输入，控制输出，以及系统状态中。而~MPC~控制算法可以将带约束的优化问题转化为新的性能指标和线性矩阵不等式(Linear matrix inequality, LMI)进行在线优化求解，但是一般情况下随着控制时域和约束数目的增加，LMI~的数目就会急剧增长，这样就会大大增加~MPC~在线计算量~\textsuperscript{\cite{nl:xi_yg2013a}}，所以目前实际中大多数应用~MPC~ 控制算法的领域都集中在石油化工等慢工业场合。而在快速系统中的应用中，目前还是处于离线仿真阶段，或者是在实验室中利用高性能运算核心进行求解以缩短运算量，例如文献\cite{JiDD2016}利用~FPGA~对非线性~MPC~算法进行硬件加速，加速非线性预测控制算法在~0.56ms~完成运算。但由于成本原因，目前基于硬件加速方案很少应用在实际场合中。故想将~MPC 应用到快速系统中，除了控制算法的实现加速外，还可以针对算法本身进行改进，而基于小波分析的多尺度系统有鲁棒性，计算量低等特点，故可以利用多尺度系统建立多尺度预测控制(Multiscale model predictive control, MSMPC) 算法来减少预测控制的在线计算量。



%********************************************************************************************************************************
\section{传统线性约束预测控制算法}
%********************************************************************************************************************************
%***********************************************************************************************************************************
预测控制的基本原理就包含三个步骤：预测系统未来动态，求解优化问题，计算出来的解的第一个元素作用于系统；然后进行滚动时域、重复进行的机制。故可以按照此思路推导出基于线性状态空间模型预测控制的基本原理~\textsuperscript{\cite{nl:chen_h13a}}。

(1)系统模型

考虑如下线性离散系统的状态空间模型：
\equ{\label{equ4:1:model}
\begin{array}{l}
x(k + 1) = Ax(k) + Bu(k) + d(k)\\
y(k) = Cx(k)
\end{array}
 }
其中~$k$~为系统当前时刻，$x(k) \in {\mathbb{R}^{{n_x}}}$ ，$u(k) \in {\mathbb{R}^{{n_u}}}$ ，$y(k) \in {\mathbb{R}^{{n_c}}}$ 分别是系统的状态量、控制量和被控输出变量；$d(k) \in {\mathbb{R}^{{n_d}}}$ 代表系统测量噪声或建模误差等；$A,B,C$ 是相应维数的系统矩阵。考虑该系统的控制目标为系统被控输出快速的跟踪上给定参考输入~$r$，并且满足一定的系统输入约束和输出约束：
 \equ{\label{equ4:2:constraint}
\begin{array}{l}
{u_{\min }}(k) \le u(k) \le {u_{\max }}(k)\\
{y_{\min }}(k) \le y(k) \le {y_{\max }}(k)
\end{array}
 }

(2)预测模型

模型预测控制需要基于系统模型进行未来动态预测，设定预测控制时域长度为~$N$，假设系统状态全部可测，根据系统线性模型\ref{equ4:1:model}可以推导出系统预测模型：
\equ{\label{equ4:3:predictivemodel}
X(k + 1) = {S_x}x(k) + {S_u}U(k) + {S_d}D(k)
 }
其中

$X(k + 1) = \left[\! \begin{array}{l}
x(k + 1)|k\\
x(k + 2)|k\\
\;\;\;\;\;...\\
x(k + N)|k
\end{array} \right]$，
$U(k) = \left[ \begin{array}{l}
\;\;\;\;\;\;u(k)\\
\;\;\;\;u(k + 1)\\
\;\;\;\;\;\;\;...\\
u(k + N - 1)
\end{array} \right]$ ，
$D(k) = \left[\! {\begin{array}{*{20}{c}}
{d(k)}\\
{d(k \!+\! 1)}\\
{...}\\
{d(k \!+ \!N \!-\! 1)}
\end{array}} \!\right] $，

${S_x} = \left[ {\begin{array}{*{20}{c}}
A\\
{{A^2}}\\
{...}\\
{{A^N}}
\end{array}} \right]$，
${S_u} = \left[ {\begin{array}{*{20}{c}}
B&0&{...}&0\\
{AB}&B&{...}&0\\
{...}&{...}&{...}&{...}\\
{{A^{N - 1}}B}&{{A^{N - 2}}B}&{....}&B
\end{array}} \right]$ ，
${S_d} = \left[ {\begin{array}{*{20}{c}}
I&0&{...}&0\\
A&I&{...}&0\\
{...}&{...}&{...}&{...}\\
{{A^{N - 1}}}&{{A^{N - 2}}}&{....}&I
\end{array}} \right]$.

(3)优化问题描述

根据系统控制目标，模型预测控制的优化问题可以描述为：
\equ{\label{equ4:4:OP_Q}
\mathop {\min }\limits_{u(k),k = 1,...N} J = \mathop \sum \limits_N \{ {(r(k) - x(k))^T}p(k)(r(k) - x(k) + u{(k)^T}q(k)u(k))\}
}
也可以写成预测模型形式
\equ{\label{equ4:5:OP_Q}
\mathop {\min }\limits_U J = {(R - X)^T}P(R - X) + {U^T}QU
}
其中~$R=[r(k + 1),r(k + 2),...,r(k + N)]$~是给定路径，$X = {\left[ {x(k + 1),x(k + 2),...x(k + N)} \right]^T}$~是状态预测量， $U = {\left[ {u(1),u(2),...u(N)} \right]^T}$ ，$P$~和~$Q$~分别是对状态量和控制输入量的加权，~$N$~为时域长度。
其实如果参考给定路径通过模型再结合输入输出约束的情况下离线计算出来，那么目标函数中对控制输入量~$U(k)$~的加权可以不需要添加，这样目标函数可以写成
\equ{\label{equ4:6:OP_Q}
\mathop {\min }\limits_U J = {(R - X)^T}(R - X)
}
其满足系统状态方程和输入输出约束
\[\begin{array}{l}
X = {S_x}x(1) + {S_u}U + {S_d}D\\
r(k) = a - {G^k}b\\
y(k) = Cx(k)\\
{u_{\min }}(k) \le u(k) \le {u_{\max }}(k)\\
{y_{\min }}(k) \le y(k) \le {y_{\max }}(k)
\end{array}\]

%由于约束条件的存在，我们无法像无约束预测控制中优化问题直接求导得到解析解，即不能得到如式（\ref{equ3:7:gain}）的~$K_{mpc}$~的准确表达式，需要对上式进行转化，采取数值计算方法进行求解，对目标函数进行转化如下二次型形式

由于约束条件的存在，我们无法直接得到优化问题的解析解，故需要对上式进行转化，采取数值计算方法进行求解，对目标函数进行转化如下二次型形式
\equ{\label{equ4:7:QP}
\begin{array}{l}
\mathop {\min }\limits_U {\!(R \!\!-\!\! X)^T}(R \!-\! X)\! \!=\!\! \mathop {\min }\limits_U {(R \!\!-\!\! {S_x}x(1) \!\!-\!\! {S_u}U\! -\!\! {S_d}D)^T}(R\! \!\!-\! {S_x}x(1) \!-\!\! {S_u}U \!\!-\!\! {S_d}D)\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\; = \mathop {\min }\limits_U {(\bar R - {S_u}U)^T}(\bar R - {S_u}U)\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\; \Leftrightarrow \mathop {\min }\limits_U \frac{1}{2}{U^T}{S_u}^T{S_u}U - {{\bar R}^T}{S_u}U
\end{array}
}

其中~$\bar R = R - {S_x}x(1) - {S_d}D$~，再结合输入输出约束，可以将优化问题转换成如下标准二次规划(Quadratic Programming，QP)问题进行求解：
\equ{\label{equ4:8:standardQP}
\begin{array}{l}
\mathop {\min }\limits_U f(U) = \frac{1}{2}{U^T}HU + fU\\
\text{满足} {C_b} \cdot U \le b
\end{array}
}
其中~$H$~是~Hessian~矩阵，且满足~$H > 0$~ ，~$f$~是梯度向量，这样对应到式
（\ref{equ4:7:QP}）可得
 \[H = {S_u}^T{S_u},f =  - {\bar R^T}{S_u}{C_b} = \left[ \begin{array}{l}
\;\;I\\
\; - I\\
C{S_u}\\
 - C{S_u}
\end{array} \right],b = \left[ \begin{array}{l}
\;\;\;\;\;\;\;\;\;\;\;\;\;\;{U_{\max }}\\
\;\;\;\;\;\;\;\;\;\;\;\; - {U_{\min }}\\
{Y_{\max }} - C({S_x}x(1) + {S_d}D)\\
 - {Y_{\max }} + C({S_x}x(1) + {S_d}D)
\end{array} \right]\]

故可以通过求解~QP~问题得到优化控制序列 ~$U(k) = {[u(k),u(k + 1),...,u(k + N - 1)]^T}$，然后将优化控制序列的第一个元素~$u(k)$~ 作用到系统。一般来说，求解~QP 问题的方法有很多，常见的方法有积极集法(Active Set Method)~\textsuperscript{\cite{best1990active}}、粒子群算法(Particle Swarm Optimization, PSO)~\textsuperscript{\cite{poli2007particle}}、内点法(Interior Point Method, IPM)~\textsuperscript{\cite{helmberg1996interior}}等，各种算法都有其优缺点，如~PSO~算法属于一种随机算法，其结构简单，易于理解，但往往需要大量的迭代才能得到稳定的最优收敛解，不过是其各粒子间的寻优过程是相互独立的，具备并行运算特性~\textsuperscript{\cite{engel2009}}；而积极集法通过求解拉格朗日子问题，然后通过不断的判断是否有约束起作用，进而更新起作用约束集，此方法的积极发矩阵变动频繁，求解迭代步长不确定，使得每个采样时间求解的计算量不确。QP~问题的求解直接影响预测控制的运行速度，如果想把预测控制运用到实际系统中，需要结合实际的系统选择合适的~QP~求解算法，详细介绍请参考文献\cite{qinop09}\cite{mafenghua10}，在此不多赘述。
%********************************************************************************************************************************
\section{多尺度模型预测控制}
%********************************************************************************************************************************
传统模型预测控制的预测模型、目标函数、系统约束和优化问题描述都是基于时间变量进行刻画描述的，而多尺度域框架是在时间和尺度域上刻画，它提供了一个类似时间域的环境来表示频率域的具体要求。尺度模型能从不同频率上处理同一个系统，能够获得系统的更多信息，从而降低由于测量误差，建模误差等系统噪声而产生的系统不确定性。多尺度预测控制就是利用小波变换函数，将时域内基于时间变量刻画的预测控制算法转换到多尺度域内基于时间和尺度变量描述预测控制算法进行计算求解。下面分别对多尺度预测控制的系统模型、目标函数、系统约束和优化问题描述的变换进行详细说明。
%********************************************************************************************************************************
\subsection{多尺度系统动态模型建立}
%********************************************************************************************************************************
Haar~小波是结构最简单，也是最早出现的一种小波，所有正交紧支撑小波中唯一具有对称（反对称）性小波，非常适合用于多尺度建模中，目前利用多尺度建模的小波也大多数用的是~Haar~小波，其尺度函数和小波函数分别如图\ref{fig4:1:harr}~所示
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/harr.eps}
\caption{Harr小波尺度函数和小波函数图} \label{fig4:1:harr}
\end{figure}

即  ~$\phi (t) = \left\{ \begin{array}{l}
1\;\;\;\;\;\;\;0 \le t < 1\\
0\;\;\;\;\;\;otherwise
\end{array} \right.$~和~$\psi (t) = \left\{ \begin{array}{l}
1\;\;\;\;\;\;\;0 \le t < 1/2\\
 - 1\;\;\;\;\;1/2 \le t < 1
\end{array} \right.$，
其高通滤波器和低通滤波器组分别为 ~$h = 1/\sqrt 2 [1\;\;1]$~和 ~$g = 1/\sqrt 2 [1\;\; - 1]$。
假设有一个时间序列 ~$f(t) = \{ f(0),f(1),...,f(n),...\}$，通过对时间信号的离散~Haar~小波变换可以得到~$-1$~层的尺度系数和小波系数：
\equ{\label{equ4:9:Harr_WTF}
\begin{array}{l}
f( - 1,k) = \frac{1}{{\sqrt 2 }}(f(0,2k) + f(0,2k + 1))\;\;\\
\delta f( - 1,k) = \frac{1}{{\sqrt 2 }}(f(0,2k) - f(0,2k + 1))
\end{array}
}
其中尺度系数和小波系数分别代表着信号的低频部分（即原信号的近似信号）和高频部分（即原信号的偏差信号），然后在~$-1$~层继续对原信号的近似信号（尺度系数）进行~Harr~小波分解，从而得到~$-2$~层的尺度系数和小波系数，以此往复，从而不同尺度上的原信号的尺度系数~$f( - s,k)$~ 和小波系数~$\delta f( - s,k)$~ ，其中，~$f( - s,k)$~中的~$s =0,1,2,...$~表示尺度，~$s=0$~ 表示原始的时间物理层。原始信号的~Harr~ 小波多尺度分解可以用如图~\ref{fig4:2:tree_harr}~中的二叉树结构进行表示的，其中横坐标~$k$~ 是时间序列，~$-s$~是尺度层。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/tree_harr.eps}
\caption{ haar小波变换系数的二叉树表示方法} \label{fig4:2:tree_harr}
\end{figure}
首先将时域内线性系统模型的状态量~$x(k)$~ ，输入量~$u(k)$~ 、偏差 ~$d(k)$~和输出量 ~$y(k)$~ 的序列放在二叉树的物理层，也就是第0层进行表示，可以得到多尺度域内物理层上的系统模型：
\equ{\label{equ4:10:Harr_WTF0}
\begin{array}{l}
x(0,k + 1) = A(0)x(0,k) + B(0)u(0,k) + d(0,k)\\
y(0,k) = C(0)x(0,k)
\end{array}
}
其中， ~$x(0,k)$~中的~$(0,k)$~ 表示二叉树中尺度~$0$~上的第~$k$~个节点， ~$A(0)$~表示的是在~$0$~ 尺度上的转移矩阵，~$B(0)$~ 表示的是~$0$~ 尺度上的输入矩阵，$C(0)$~表示的是~$0$~尺度上的输出矩阵。然后，利用~Haar~小波正交离散分解函数（\ref{equ4:9:Harr_WTF}） 和~$0$~层上的模型可得~$-1$~层上的近似模型：
\equ{\label{equ4:11:Harr_WTF1}
\begin{array}{l}
x( - 1,k) = \frac{1}{{\sqrt 2 }}(x(0,2k - 1) + x(0,2k))\\
\;\;\;\;\;\;\;\;\;\;\;\; = \frac{1}{{\sqrt 2 }}((I + A(0))x(0,2k - 1) + B(0)u(0,2k - 1) + d(0,2k - 1))\\
\;\;\;\;\;\;\;\;\;\;\;\; = \bar A(0, - 1)x(0,2k - 1) + \bar B(0, - 1)u(0,2k - 1) + \bar D(0, - 1)d(0,2k - 1)\\
y( - 1,k) = C( - 1)x( - 1,k)
\end{array}
}

依次推导可得~$-s$~层上的多尺度模型：
%\begin{multline}\label{equ4:12:Harr_model}
%  x( - s - 1,k) = \bar A( - s, - s - 1)x( - s,2k - 1) + \bar B( - s, - s - 1)u( - s,2k - 1) + \bar D( - s, - s - 1)d( - s,2k - 1)\\
%  y( - s,k) = C( - s)x( - s,k)
%\end{multline}
\equ{\label{equ4:12:Harr_model}
\begin{array}{l}
x( - s - 1,k) \!=\! \bar A( - s, - s - 1)x( - s,2k - 1) \!+\! \bar B( - s, - s - 1)u( - s,2k - 1) \!\\
\quad\quad\qquad \qquad+ \bar D( - s, - s - 1)d( - s,2k - 1)\\
y( - s,k) = C( - s)x( - s,k)
\end{array}
}
其中
\[\begin{array}{l}
\bar A( - s, - s - 1) = \frac{{I + A{{(0)}^{{2^s}}}}}{{\sqrt 2 }},\;\;\;\;\;\bar B( - s, - s - 1) = \frac{1}{{\sqrt 2 }}[\sum\limits_{i = 0}^{{2^s} - 1} {A{{(0)}^i}} ]B(0)\\
\bar D( - s, - s - 1) = \frac{1}{{\sqrt 2 }}\sum\limits_{i = 0}^{{2^s} - 1} {A{{(0)}^i}} ,\;\;\;\;C( - s) = C(0).
\end{array}\]
上式中的~$\bar A$~ ,~$\bar B$~ 和~$\bar C$~中的~$( - s, - s - 1)$~ 表示的是尺度~$-s$~到尺度~$-s-1$~ 之间的系数，除此之外，为了展现多尺度模型和传统模型之间的联系，还有同一尺度之间的状态量之间的关系，即表现出形式：
\equ{\label{equ4:13:Harr_WTFs}
x( - s,k + 1) = A( - s)x( - s,k) + B( - s)u( - s,k) + d( - s,k)
 }
 以~$s=-1$~ 层为例，可得如下式：
\begin{small}
\[\begin{array}{l}
x(\! - \!1,\frac{k}{2}\! +\! 1) = \frac{1}{{\sqrt 2 }}[x(0,k \!+ 2)\! +\! x(0,k +\! 3)] = \frac{1}{{\sqrt 2 }}[{A^2}x(0,k) \!+\! ABu(0,k) \!+\! Bu(0,k\! +\! 1)\!+\! Ad(0,k) \\
\;\;\;\;\;\;\;\;\;\;\;\;+ d(0,k \!+ \!1)+ {A^2}x(0,k \!+ \!1) + ABu(0,k \!+\! 1) + Bu(0,k \!+ \!2) + Ad(0,k + 1) \!+\! d(0,k \!+\! 2)]\\
\;\;\;\;\;\;\;\;\; {\rm{ = }}\frac{1}{{\sqrt 2 }}[{A^2}x(0,k) + {A^2}x(0,k + 1)
+\! (ABu(0,k) \!+ (AB + B)u(0,k + 1)\! + Bu(0,k + 2))\!\\
\;\;\;\;\;\;\;\;\;\;\;\; + Ad(0,k)\! +\! (A + I)d(0,k \!+ \!1)\! +\! d(0,k + 2)]\\
\;\;\;\;\;\;\;\;\; = {A^2}x( - 1,\frac{k}{2}) \!+\! \frac{1}{{\sqrt 2 }}[ABu(0,k) + (I + A)u(0,k + 1) + Bu(0,k + 2)] \\
\;\;\;\;\;\;\;\;\;\;\;\;+ \frac{1}{{\sqrt 2 }}Ad(0,k) \!+ (A + I)d(0,k \!+\! 1) + d(0,k + 2)]\\
\;\;\;\;\;\;\;\;\; = A( - 1)x( - 1,\frac{k}{2}) + B( - 1)u( - 1,\frac{k}{2}) + d( - 1,\frac{k}{2})
\end{array}\]
\end{small}
图\ref{fig4:2:tree_para}展示着多尺度建模中各个模型参数的表示形式。
\begin{figure}[htb]
\centering
\includegraphics[width=8cm]{ch4/tree_para.eps}
\caption{ 二叉树上模型各种模型参数} \label{fig4:2:tree_para}
\end{figure}
在此需要注意的是~$u$~的表示表达形式，由此推广到任意尺度可以发现在多尺度域上，输入变量尺度之间的关系为：
\begin{small}
\equ{\label{equ4:13:Harr_u}
u( \!-\! s,k) \!=\! \frac{{{B^{ \!-\! 1}}}}{{\sqrt 2 }}{(I \!+\! {A^{2s}})^{ \!-\! 1}}\{ {A^{2s}}Bu( \!- s \!+\! 1,2k \!-\! 1) \!+\! (I \!+\! {A^{2s}})Bu( \!-\! s \!+\! 1,2k) \!+\! Bu( \!- \!s \!+ \!1,2k\! +\! 1)\}
}
\end{small}
可以发现其并不满足传统意义上的~Harr~小波关系，即
\[u( - s,k) \ne \frac{1}{{\sqrt 2 }}(u( - s + 1,2k - 1) + u( - s + 1,2k))\]
而是当前尺度的输入变量的尺度系数和下一尺度的三个尺度系数以及系统的系统矩阵有关，说明其是基于模型的，而且系数加和有如下规律：
\[\frac{{{B^{ - 1}}}}{{\sqrt 2 }}{(I + {A^{2s}})^{ - 1}}\{ {A^{2s}}B + (I + {A^{2s}})B + B\}  = \sqrt 2 \]
针对此现象，国外学者称之为“改进的hat小波”~\textsuperscript{\cite{Stephanopoulos1998Multi}}，其关系如图~\ref{fig4:3:u_hat}~所示：
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch4/hatwavelet.eps}
\caption{ 输入变量在二叉树上的各层之间关系} \label{fig4:3:u_hat}
\end{figure}

多尺度模型（\ref{equ4:12:Harr_model}）是用尺度系数描述的，类似地可以推导出用小波系数描述的多尺度模型：
\equ{\label{equ4:14:model_wave}
\begin{array}{l}
\delta x( - s - 1,k) = \tilde A( - s, - s - 1)x( - s,2k - 1) - \tilde B( - s, - s - 1)u( - s,2k - 1) \\
\quad\quad\qquad \qquad- \tilde D( - s, - s - 1)d( - s,2k - 1)\\
y( - s,k) = C( - s)x( - s,k)
\end{array}
}
其中
\[\begin{array}{l}
\tilde A( - s, - s - 1) = \frac{{I - A{{(0)}^{{2^s}}}}}{{\sqrt 2 }},\;\;\;\;\;\tilde B( - s, - s - 1) = \frac{1}{{\sqrt 2 }}\left[ {\sum\limits_{i = 0}^{{2^s} - 1} {A{{(0)}^i}} } \right]B(0)\\
\tilde D( - s, - s - 1) = \frac{1}{{\sqrt 2 }}\sum\limits_{i = 0}^{{2^s} - 1} {A{{(0)}^i}} ,\;\;\;\;\;\;\;\;\;\;\;\;C( - s) = C(0).
\end{array}\]

式（\ref{equ4:12:Harr_model}）和式（\ref{equ4:14:model_wave}）就是线性系统的多尺度动态模型，尺度系数多尺度模型（\ref{equ4:12:Harr_model}）可以看成是动态系统的均值模型，而小波系数多尺度模型（\ref{equ4:14:model_wave}） 则可以认为其能保留因为平均模型而损失的信号细节模型或者偏差模型。在多尺度模型中，“状态”变量从低尺度向高尺度转换时，比如说~$x( - 1,k) \to x( - 2,k/2)$ 意味着对过去时刻的信息进行提取，其相当于时域模型中的~$x(k)$~ ，而在原本时域系统中模型当前状态值~$x(k)$~ 影响下一个时刻状态值~$x(k+1)$~ 的这层关系在多尺度系统中也将不复存在~\textsuperscript{\cite{nl:Karsligil_06a}}。在多尺度模型中，系统的所有信息由两个变量，首先是尺度变量~$s$~，再就是时域信息~$k~$。 从传统的经典控制领域，分析一个系统主要从系统的稳定性、可控性和可观测性出发，传统的时序状态空间模型中，通过系统的状态矩阵来得到系统的这些特性，而在多尺度系统中，依旧可以从这几个条件出发，得出多尺度系统的可控性、可观测性和稳定性等，通过理论推导，可以得出从时域系统转换得到的多尺度系统和原系统有相同的系统特性，在此就不作证明，详细的证明过程参考文献\cite{nl:stephanopoulos_g08b}\cite{karsla2000multiscale}\cite{nl:stephanopoulos_g2000}。

由于多尺度模型是将原时域内的模型转换到同时包含时域和频域（尺度域）的系统进行考虑，故其能包含系统更多的信息，可以降低系统的噪声和提高系统的鲁棒性，而基于二叉树的多尺度建模有并行的结构，能缩小对未来状态求解的计算量，假设给定初始节点~$(0,1)$~ 的状态值~$x(0,1)$~，并且在所有节点的输入信息已知的情况下，就可以根据多尺度均值模型计算~$x(-1,1)$~ 的值，在~$(-1,1)$~ 节点可以向上计算~$x(-2,1)$~的值，同时也可以向下计算~$x(-1,2)$~ 的值，图\ref{fig4:5:multiscale_model_Pall}展示了具体的并行计算过程，其计算步骤只需要~$K = 2{\log _2}({2^s})$~次，其中~$s$~代表着尺度，相对于传统时域内的模型在计算系统未来状态时的如图\ref{fig4:6:normol_model_seri}的逐个时刻的求解，其需要~${2^s}$~ 步才能完成求解，故多尺度模型具备更快的计算的速度，特别是针对更远时刻的状态求解，这种优势就会更加明显。

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/multiscale_model_Pall.eps}
\caption{ 多尺度模型并行运算特性} \label{fig4:5:multiscale_model_Pall}
\end{figure}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/normolmodel_seri.eps}
\caption{ 传统模型串行运算特性} \label{fig4:6:normol_model_seri}
\end{figure}

%********************************************************************************************************************************
\subsection{多尺度预测模型推导}
%********************************************************************************************************************************
由于小波多尺度模型是非冗余的，故可以基于小波系数多尺度动态模型（\ref{equ4:14:model_wave}）进行多尺度预测模型的推导。根据建立的小波系数多尺度模型可知，小波系数模型中的所有状态~$\delta x( - s,k)(s=1,2,...)$~都可以用二叉树上所有左节点的尺度系数模型状态进行表示，二叉树上的所有左节点的解可以表示所有解的形式，故可以基于小波系数多尺度模型来描述整个多尺度系统，并进行多尺度预测模型的推导。

按照传统时域内的预测控制的预测模型的形式，接下来需要借助二叉树结构将多尺度域内的预测方程转换成如下的形式。
\equ{\label{equ4:15:multimodel_predictive}
\delta X = {\tilde S_x}x(0,1) + {\tilde S_u}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s) + {\tilde S_d}{\rm{\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} }}(s)
}
首先，根据~Harr~小波变换可以得到如下的式子：
\equ{\label{equ4:16:multimodel_1}
\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over X} (s) = \alpha \delta X + \beta x(0,1)
}
其中~$\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over X} (s)$ 代表着所有二叉树上除去最高层的所有左节点的尺度系数，其中~$\delta X$~ 为~$-1$~ 到~$-s$~ 层上的所有状态的小波系数序列， ~$\alpha$~和 ~$\beta$~可以通过小波变换进行离线计算得到。而根据小波系数多尺度模型可得
\equ{\label{equ4:17:multimodel_2}
\delta X = \Upsilon \mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over X} (s) + \Phi \mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s) + \Delta \mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s)
}

举一个例子说明上述的系数之间的关系，如在一个分解尺度为~2（时域为4）的单入单出系统中，上式可以写成：
\[\left[ {\begin{array}{*{20}{c}}
{x( - 1,1)}\\
{x(0,1)}\\
{x(0,3)}
\end{array}} \right] = \left[ {\begin{array}{*{20}{c}}
0&{ - 1}&0\\
0&0&0\\
{ - 1}&{ - \frac{{\sqrt 2 }}{2}}&{\frac{{\sqrt 2 }}{2}}
\end{array}} \right]\left[ {\begin{array}{*{20}{c}}
{\delta x( - 2,1)}\\
{\delta x( - 1,1)}\\
{\delta x( - 1,2)}
\end{array}} \right] + \left[ {\begin{array}{*{20}{c}}
{\sqrt 2 }\\
1\\
1
\end{array}} \right]x(0,1)\]

\[\begin{array}{l}
\left[ {\begin{array}{*{20}{c}}
{\delta x( - 2,1)}\\
{\delta x( - 1,1)}\\
{\delta x( - 1,2)}
\end{array}} \right] = \left[ {\begin{array}{*{20}{c}}
{\tilde A( - 1, - 2)}&0&0\\
0&{\tilde A(0, - 1)}&0\\
0&0&{\tilde A(0, - 1)}
\end{array}} \right]\left[ {\begin{array}{*{20}{c}}
{x( - 1,1)}\\
{x(0,1)}\\
{x(0,3)}
\end{array}} \right]\\
\qquad\qquad \qquad + \left[ {\begin{array}{*{20}{c}}
{ - \tilde B( - 1, - 2)}&0&0\\
0&{ - \tilde B(0, - 1)}&0\\
0&0&{ - \tilde B(0, - 1)}
\end{array}} \right]\left[ {\begin{array}{*{20}{c}}
{u( - 1,1)}\\
{u(0,1)}\\
{u(0,3)}
\end{array}} \right]\\
\qquad\qquad \qquad+ \left[ {\begin{array}{*{20}{c}}
{ - \tilde D( - 1, - 2)}&0&0\\
0&{ - \tilde D(0, - 1)}&0\\
0&0&{ - \tilde D(0, - 1)}
\end{array}} \right]\left[ {\begin{array}{*{20}{c}}
{d( - 1,1)}\\
{d(0,1)}\\
{d(0,3)}
\end{array}} \right]
\end{array}\]

这样结合式（\ref{equ4:16:multimodel_1}）（\ref{equ4:17:multimodel_2}）可以得到最终式（\ref{equ4:18:multimodel_predetail}）的形式，即系统在多尺度域内的预测方程表达形式为：
\equ{\label{equ4:18:multimodel_predetail}
\delta X = {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Upsilon \beta x(0,1) + {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Phi \mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s) + {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Delta {\rm{\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} }}(s)
}
对应到式（\ref{equ4:15:multimodel_predictive}），即~${\tilde S_x} = {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Upsilon \beta $~，~${\tilde S_u} = {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Phi $，${\tilde S_d} = {(I - \Upsilon \alpha )^{{\rm{ - }}1}}\Delta $.
其中~$\delta X$~为~$-1$~到~$-s$~层上的所有状态的小波系数序列，$\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s)$~ 为~$0$~到~$-s+1$~层上所有左节点的输入尺度系数序列， ~${\rm{\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} }}(s)$~为~$0$~到~$-s+1$~层上所有左节点的建模偏差尺度系数序列，即
\[\delta X \!\!=\!\! {\!\left[\!\! \begin{array}{l}
\delta x( \!-\! {s_{\max }},1)\\
\delta x( \!-\! {s_{\max }} \!\!+\!\! 1,1)\\
\;\;\;\;\;\;\;\;\;...\\
\delta x( - 1,\frac{N}{2})
\end{array} \!\!\!\right]_{m*(N\! -\! 1)}},\;\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s)\! =\! {\left[\!\! \begin{array}{l}
u( \!-\! {s_{\max }} \!+ \!\!1,1)\\
\;\;\;\;\;\;\;...\\
u(0,\frac{N}{2} \!-\! 3)\\
u(0,\frac{N}{2} \!\!-\! 1)
\end{array} \!\!\right]_{m*(N\!\! -\!\! 1)}},\;{\rm{\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} }}(s) \!=\! {\!\left[\! \!\begin{array}{l}
d( - {s_{\max }},1)\\
...\\
d(0,\frac{N}{2} \!-\! 3)\\
d(0,\frac{N}{2} \!-\! 1)
\end{array} \!\!\right]_{m*(N \!\!-\!\! 1)}}\]
 ${\tilde S_x}$,${\tilde S_u}$ ,${\tilde S_d}$ ~可称之为多尺度模型的预测矩阵。

%********************************************************************************************************************************
\subsection{多尺度目标函数建立}
%********************************************************************************************************************************
针对传统时域内的目标函数（\ref{equ4:6:OP_Q}），需要将其进行多尺度内转换，类似多尺度模型的建立，将其进行小波分解。
根据推导得到的多尺度小波预测模型，可将时域内目标函数转换为如下小波模型描述的多尺度目标函数：
\equ{\label{equ4:19:MSmodel_OJ}
\begin{array}{l}
\mathop {\min }\limits_U {(R - X)^T}(R - X) = \mathop {\min }\limits_U {(R - X)^T}{W^T}W(R - X)\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\; = \mathop {\min }\limits_{\hat X} {(\hat R - \hat X)^T}(\hat R - \hat X)
\end{array}
}
其中
\[\hat R = WR = \left[ \begin{array}{l}
\;\;\;\;r( - s\max ,1)\\
\;\;\;\delta r( - s\max ,1)\\
\;\;\;\;\;\;\;\;\;\;\;...\\
\delta r( - 1,(k + N)/2)
\end{array} \right]\;\;,\hat X = WX = \left[ \begin{array}{l}
\;\;\;\;x( - s\max ,1)\\
\;\;\;\delta x( - s\max ,1)\\
\;\;\;\;\;\;\;\;\;\;...\\
\delta x( - 1,(k + N)/2)
\end{array} \right]\;.\;\]
$W$~是~Haar~小波转换矩阵，且其是标准正交，即~${W^T}W = I$~ 。其是通过~Harr~小波进行递归运算得到的，下面是在分解层次为2（或者说控制时域为4）的情况下的转换矩阵~$W$~的值（其中~$n$~ 代表系统中状态量的个数，$I(n)$~ 代表着~$n$~维单位矩阵）：
\[W = \left[ {\begin{array}{*{20}{c}}
{\frac{1}{2}*I(n)}&{\frac{1}{2}*I(n)}&{\frac{1}{2}*I(n)}&{\frac{1}{2}*I(n)}\\
{\frac{1}{2}*I(n)}&{\frac{1}{2}*I(n)}&{\frac{{ - 1}}{2}*I(n)}&{\frac{{ - 1}}{2}*I(n)}\\
{\frac{1}{2}*I(n)}&{\frac{{ - 1}}{2}*I(n)}&0&0\\
0&0&{\frac{1}{2}*I(n)}&{\frac{{ - 1}}{2}*I(n)}
\end{array}} \right]\]

可以发现通过变换后多尺度域目标函数中的变量由二叉树中所有层小波系数和最高层的尺度系数组成，这也对应了前文介绍的小波多分辨率分析的思想。在小波分析中，其他层次的尺度系数是冗余的，为了后续处理方便，将最高层的尺度系数转换成小波系数的表示形式。首先通过~Harr~小波转换公式：
\equ{\label{equ4:20:MSmodel_scale}
f( - s - 1,1) = \frac{1}{{\sqrt 2 }}(f( - s,1) + f( - s - 2))
}
\equ{\label{equ4:21:MSmodel_wave}
\delta f( - s - 1,1) = \frac{1}{{\sqrt 2 }}(f( - s,1) - f( - s - 2))
}
将两式进行相加得：
\[f( - s - 1,1) = \sqrt 2 f( - s,1) - \delta f( - s - 1,1)\]
同理在下一个尺度：
\[f( - s,1) = \sqrt 2 f( - s + 1,1) - \delta f( - s,1)\]
依次递推得到最高层的尺度系数可以通过所有层的最左节点上的小波系数和初始尺度系数推导：
\equ{\label{equ4:22:MSmodel_1}
f( - s\max ,1) =  - \sum\limits_{i = 0}^{n - 1} {{{\sqrt 2 }^i}\delta f( - {s_{\max }} + i,1)}  + {\sqrt 2 ^n}f(0,1)
}
而初始尺度系数就是原时域时间内的信息，一般情况下是已知的，则有：
\equ{\label{equ4:23:MSmodel_init}
\begin{array}{l}
r( - {s_{\max }},1) = M\delta R + hr(0,1)\\
x( - {s_{\max }},1) = M\delta X + hx(0,1)
\end{array}
}
其中~$M$~和~$h$~是常数矩阵，$\delta R = [\delta r( - {s_{\max }},1),\delta r( - {s_{\max }} + 1,1),...,\delta r( - 1,(k + N)/2)]$，$\delta X = [\delta x( - s\max ,1),\delta x( - s\max  + 1,1),...,\delta x( - 1,(k + N)/2)]$ 。

将式（\ref{equ4:23:MSmodel_init}）代入式（\ref{equ4:19:MSmodel_OJ}），多尺度目标函数可以转换为以 ~$\delta X$~为独立变量的标准二次型表达形式：
\equ{\label{equ4:24:MS_OJ}
\begin{array}{l}
\;\;\mathop {\min }\limits_{\hat X} {(\hat R \!-\! \hat X)^T}(\hat R\! - \!\hat X) \!=\! \mathop {\min }\limits_{\delta X} {(\delta R \!-\! \delta X)^T}(\delta R \!-\! \delta X) \!+\! \mathop {\min }\limits_{x({s_{\max }},1)} {(r \!-\! x)^T}(r\! -\! x)\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\; = \mathop {\min }\limits_{\delta X} {(\delta R - \delta X)^T}(I + {M^T}M)(\delta R - \delta X)\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\; {\rm{                                   }} \buildrel \Delta \over = \mathop {\min }\limits_{\delta X} \frac{1}{2}\delta {X^T}(I + {M^T}M)\delta X - (\delta {R^T} + {M^T}M\delta R)\delta X
\end{array}
}
%********************************************************************************************************************************
\subsection{多尺度优化问题描述}
%********************************************************************************************************************************
首先将时域内系统约束条件转换到多尺度域内，多尺度系统约束条件可以通过时域系统约束的上下界进行设计，通过~Harr~小波变换和关于输入量的“改进的hat小波”变换可得出在多尺度域内系统约束与原时域内的约束的关系如下：
\equ{\label{equ4:25:MS_constrains}
\begin{array}{l}
{\sqrt 2 ^s}{u_{\min }} \le u( - s,k) \le {\sqrt 2 ^s}{u_{\max }}\\
{\sqrt 2 ^s}{y_{\min }} \le y( - s,k) \le {\sqrt 2 ^s}{y_{\max }}
\end{array}
}
可以看出，多尺度域内的约束和尺度有关，不同尺度的约束不一样，根据多尺度预测模型（\ref{equ4:15:multimodel_predictive}）可以将系统约束转换为独立变量 ~$\delta X$~的约束表达形式，输入约束可以转换为：
\equ{\label{equ4:26:MS_constrains1}
\left[ \begin{array}{l}
{{\tilde S}_u}^{ - 1}\\
 - {{\tilde S}_u}^{ - 1}
\end{array} \right]\delta X \le \left[ \begin{array}{l}
{U_{\max }} + {{\tilde S}_u}^{ - 1}({{\tilde S}_x}x(0,1) + {{\tilde S}_d}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s))\\
 - {U_{\min }} - {{\tilde S}_u}^{ - 1}({{\tilde S}_x}x(0,1) + {{\tilde S}_d}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s))
\end{array} \right]
}
输出约束转换成：
\equ{\label{equ4:27:MS_constrains2}
\left[ \begin{array}{l}
C(s)\alpha \\
 - C(s)\alpha
\end{array} \right]\delta X \le \left[ \begin{array}{l}
{Y_{\max }} - C\beta x(0,1)\\
 - {Y_{\min }} + C\beta x(0,1)
\end{array} \right]
}

基于多尺度目标函数（\ref{equ4:24:MS_OJ}）和多尺度约束（\ref{equ4:27:MS_constrains2}），多尺度域内预测控制的优化问题可以描述为如下标准的QP 优化问题形式：
\equ{\label{equ4:28:MS_QP}
\begin{array}{l}
\mathop {\min }\limits_{\delta X} \frac{1}{2}\delta {X^T}(I + {M^T}M)\delta X - (\delta {R^T} + {M^T}M\delta R)\delta X\\
 = \mathop {\min }\limits_{\delta X} \frac{1}{2}\delta {X^T}E\delta X + G\delta X\\
 \text{满足约束条件：}{L_b} \cdot \delta X \le b
\end{array}
}
其中
\[E = I + {H^T}H,\;\;G =  - (\delta {R^T} + {M^T}M\delta R),\]
\[{L_b} = \left[ \begin{array}{l}
{{\tilde S}_u}^{ - 1}\\
 - {{\tilde S}_u}^{ - 1}\\
C(s)\alpha \\
 - C(s)\alpha
\end{array} \right],\;b = \left[ \begin{array}{l}
{U_{\max }} + {{\tilde S}_u}^{ - 1}({{\tilde S}_x}x(0,1) + {{\tilde S}_d}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s))\\
 - {U_{\min }} - {{\tilde S}_u}^{ - 1}({{\tilde S}_x}x(0,1) + {{\tilde S}_d}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s))\\
\;\;\;\;\;\;\;\;\;{Y_{\max }} - C\beta x(0,1)\\
\;\;\;\;\;\;\;\; - {Y_{\min }} + C\beta x(0,1)
\end{array} \right].\]

显然，多尺度优化问题也是一个标准的~QP~问题，故多尺度预测控制的优化问题也可以通过求解~QP~ 问题得到优化序列~$\delta X$~ ，再通过下式：
\equ{\label{equ4:29:MS_QPU}
\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} (s) = {\tilde S_u}^{ - 1}(\delta X - {\tilde S_x}x(0,1) - {\tilde S_d}\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over D} (s))
}

即可得到多尺度域中的控制输入优化序列~$\mathord{\buildrel{\lower3pt\hbox{$\scriptscriptstyle\smile$}}
\over U} $~ ，然后将第~0~层，即物理层上的第一个优化输入序列~$u(0,1)$~，作用于被控系统，由此往复对原始时域系统进行控制。

由上述分析可得，多尺度预测控制是通过时域预测控制推导而来，所以~MSMPC~和~MPC~有许多相同的理论特性，如控制器稳定性，可行性，鲁棒性和控制性能等~\textsuperscript{\cite{nl:stephanopoulos_g08a}}。 当然在预测控制器设计中，时域长度的确定很重要，在常规的~MPC~控制器中，选择合适的预测时域和控制时域对控制性能和控制鲁棒性有很大的影响，而在~MSMPC~控制器设计中，由于其具有树结构设计，故其在每次计算最优控制序列前，都能计算出合适的时域长度，故~MSMPC~的时域长度在每个迭代周期都是变化的。

MSMPC~中的时域长度和尺度有关，为了获得一个满意的尺度系数，一般通过二叉树的最左边的节点优化求解获得一个次优解~$u$~，然后通过判断右节点的跟踪精度进行尺度系数的计算，计算过程如图~ \ref{fig4:7:findscale} 所示。例如，从(0,1)节点出发，在节点(-1,1)处进行优化求解，获得~$u(0,1)$，判断~$x(0,2)$~跟踪~$r(0,2)$~ 的精度是否满足要求，如果满足则停止，~$s=0$~，时域长度等于~1，不满足则继续向上求解，直到找到一个满足右节点精度的尺度~$s$，这样就可以得到时域长度~$N=2^s$。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/find_scale.eps}
\caption{ 多尺度预测控制尺度计算过程示意图} \label{fig4:7:findscale}
\end{figure}

寻找尺度的优化问题可以表示成
\equ{\label{equ4:30:MS_findscale}
\mathop {\min }\limits_{u( - s,1)} {(r( - s - 1,1) - x( - s - 1,1))^T}(r( - s - 1,1) - x( - s - 1,1))
}
其终止条件为
 \equ{\label{equ4:31:MS_findscale_condition}
  x( - s,2) = \bar Ax( - s,1) + \bar Bu( - s,1) + \bar Dd( - s,1) \approx r( - s,2)         }
实际上预测控制的计算量取决于其矩阵运算的维数，时域长度越大预测控制计算量越大，而~MSMPC~控制算法能够实现变时域的预测控制，且一般情况下其时域会随着控制过程的进行慢慢减小，故其计算量会大大减小。
%********************************************************************************************************************************
\section{仿真实例}
%********************************************************************************************************************************
为了验证多尺度~MPC~控制器的有效性，本节通过仿真实例对多尺度~MPC~控制器进行功能验证和性能分析，请加入传统的~MPC~控制器进行对比。

\vspace{15pt} \hspace{-28pt} {\bf （1）数值仿真实例}

考虑如下一个线性离散动态系统模型：
\[\begin{array}{l}
x(k + 1) = Ax(k) + Bu(k)\\
y(k) = Cx(k)
\end{array}\]
其中系统矩阵为
\[A = \left[ \begin{array}{l}
1.1\;\;\;0.3\\
0.6\;\;\;1.1
\end{array} \right]\;,
B = \left[ \begin{array}{l}
\;1\;\;\;\; - 2\\
 - 1\;\;\;\;1
\end{array} \right]\;,
C = \left[ \begin{array}{l}
1\;\;\;\;0\\
0\;\;\;\;1
\end{array} \right]\]
系统的控制目标是使系统状态跟踪如下给定参考轨迹：
\[{r_k} = {x_f} - {\left[ \begin{array}{l}
0.8\;\;\;0\\
\;0\;\;\;\;0.3
\end{array} \right]^k}({x_f} - {x_k})\]
其中~${x_k}$~为当前系统状态，系统的初值和终值为：
\[{x_0} = \left[ \begin{array}{l}
2\\
1
\end{array} \right] \to {x_f} = \left[ \begin{array}{l}
4\\
5
\end{array} \right]\]

同时满足如下系统输入约束：
\[{u_{\min }} = \left[ \begin{array}{l}
2.95\\
1.71
\end{array} \right]\;,
{u_{\max }} = \left[ \begin{array}{l}
8.09\\
5.04
\end{array} \right]\]
通过系统矩阵~$A$~的特征值（eig($A$)=[1.5243 0.6757]）可知该系统为非稳定动态系统。在预测控制器设计中，传统时域~MPC~的时域长度设置为常值~8，且预测时域和控制时域长度一致，而~MSMPC~ 初始的尺度为~0，其最大尺度设置为~4，因此，MSMPC~时域长度最大为~16。

通过~MATLAB~仿真实验，MSMPC~和~MPC~两种控制器作用下的系统响应结果如图~\ref{fig4:8:state_compare1} 所示，两种控制器的控制输出如图~\ref{fig4:9:input_compare1}~ 所示。 由实验结果可知，两种控制器都能很好的跟踪上给定参考值，并且多尺度预测控制响应更快一些，这是由于多尺度预测控制相对传统预测控制增加了频率信息，这样控制器就包含系统更多信息，其能对被控系统做出更好的控制。

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/state_compare1.eps}
\caption{MPC和MSMPC控制下系统状态输出对比} \label{fig4:8:state_compare1}
\end{figure}
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/input_compare1.eps}
\caption{MPC和MSMPC控制器输出对比} \label{fig4:9:input_compare1}
\end{figure}

图~\ref{fig4:10:horizon_length1}~和图~\ref{fig4:11:compult_time}~是计算性能分析结果图，由时域长度对比结果图可知，多尺度预测控制最初计算出来的时域长度为~8，随着跟踪偏差越来越小，时域也越来越小，最终时域变成~1，MSMPC控制器就成为一个比例控制器，这样在保证跟踪性能的同时可有效的降低计算复杂度。图~\ref{fig4:11:compult_time}是迭代计算时间对比结果，带星号的曲线是仿真过程中总体时间对比，不带星号的是两种控制器每一次优化求解的时间对比，由曲线可以看出，共同仿真15步，由于多尺度预测控制的时域长度越来越小，因此其计算复杂度较小。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/horizon_length1.eps}
\caption{MPC和MSMPC控制器的时域长度对比} \label{fig4:10:horizon_length1}
\end{figure}
\begin{figure}[!ht]
\centering
\includegraphics[width=15cm]{ch4/compult_time.eps}
\caption{MPC和MSMPC控制器运行时间对比} \label{fig4:11:compult_time}
\end{figure}

\vspace{15pt} \hspace{-28pt} {\bf （2）车辆动态性能控制}

二自由度车辆模型在汽车控制中得到广泛应用，如车辆横摆稳定性控制、自主驾驶汽车的方向盘转角控制等，由文献\cite{nl:guo_hy12a}可得二自由度车辆动态模型如下
\[\left[ {\begin{array}{*{20}{c}}
{\sigma (k{\rm{ + }}1)}\\
{\lambda (k + 1)}
\end{array}} \right] = {A_c}\left[ {\begin{array}{*{20}{c}}
{\sigma (k)}\\
{\lambda (k)}
\end{array}} \right] + {B_1}\omega (k)\]
其中 ~$\sigma$~和~$\lambda$~ 分别代表着车辆质心侧偏角和横摆角速度，其作为系统的状态量进行控制，$\omega$~ 是车辆的前轮转角，其作为系统的输入， ${A_c}$~和~$B_1$~ 系统的常量矩阵其和车辆的参数有关，根据文献\cite{wang2008}，在采样时间为~40ms~情况下，其值为
\[{A_c} = \left[ {\begin{array}{*{20}{c}}
{0.8215}&{ - 0.0320}\\
{0.0902}&{0.7865}
\end{array}} \right],\;\;\;{B_1} = \left[ {\begin{array}{*{20}{c}}
{0.0539}\\
{1.7833}
\end{array}} \right]\]
其输入约束为 ~$ - 20 \le \omega (k) \le 20$，其是一个稳定的动态系统，处于简便考虑，本文的控制目标为车辆质心侧偏角和横摆角速度能跟踪上期望值。
\[{\left[ {\begin{array}{*{20}{c}}
\sigma \\
\lambda
\end{array}} \right]_0} = \left[ {\begin{array}{*{20}{c}}
0\\
0
\end{array}} \right] \to {\left[ {\begin{array}{*{20}{c}}
\sigma \\
\lambda
\end{array}} \right]_f} = \left[ {\begin{array}{*{20}{c}}
{ - 2.12}\\
{15.11}
\end{array}} \right]\]
在预测控制器设计中，传统时域~MPC~的时域长度设置为常值~8，且预测时域和控制时域长度一致，而MSMPC初始的尺度为~0，其最大尺度设置为~4，因此，MSMPC~时域长度最大为~16。
通过仿真实验，MSMPC~和~MPC~两种控制器的系统响应结果如图\ref{fig4:12:state_compare}所示，两种控制器的控制输出如图\ref{fig4:13:input_compare}所示。由实验结果可知，两种控制器都能很好的跟踪上给定参考值，状态输出系统控制输入和并没有多大的差别，但是，相对于传统MPC，MSMPC~有更小的运算量，通过图\ref{fig4:14:horizon_length}所示，MSMPC~的控制时域是变化的，在刚开始的~6个仿真时刻，由于系统的初始状态和目标状态差别最大，MSMPC~需要系统的更多信息进行控制，故此时的时域长度为~16，而当系统跟踪上目标时，MSMPC~的时域长度立马降到~1，变成一个比例控制器，而传统~MPC~一直维持~8 的时域长度，故~MSMPC~有更好的计算性能。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/state_compare.eps}
\caption{MPC和MSMPC控制下系统状态输出对比} \label{fig4:12:state_compare}
\end{figure}
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/input_compare.eps}
\caption{MPC和MSMPC控制器输出对比} \label{fig4:13:input_compare}
\end{figure}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch4/horizon_length.eps}
\caption{MPC和MSMPC控制器的时域长度对比} \label{fig4:14:horizon_length}
\end{figure}

%********************************************************************************************************************************
\section{本章小结}
%********************************************************************************************************************************
本章主要介绍了约束多尺度预测控制的设计过程，利用~Harr~小波将传统时域内的预测控制转换到多尺度域内。首先通过多尺度建模并借助二叉树结构，得出线性多尺度模型在求解系统未来状态有并行计算结构，从而可以减小运算量；然后按照传统时域内的~MPC~算法推导过程，一步步将时域内的预测模型、目标函数和优化问题描述通过改进然后转换到多尺度域内然后进行求解，同时利用多尺度系数的二叉树结构特性，给出多尺度预测控制的尺度计算方法，通过改变多尺度预测控制的时域长度，从而有效降低了算法的计算复杂度。最后通过两个仿真实例，验证了~MSMPC~控制器的有效性和可变的时域的特性，并与传统~MPC~控制器进行对比，得出~MSMPC~算法有更小的计算量和更好的仿真控制效果，这样为~MSMPC~能应用到更多的场合打下基础。


\newpage
\thispagestyle{empty}
\cleardoublepage
