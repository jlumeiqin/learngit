%%*************************************************************************
\def\baselinestretch{1.66}
%%*************************************************************************
%\pagestyle{fancyplain}
%**************************************************************************
\chapter{单入单出多分辨率控制器}
%%*********************************************************************************************************************************
\fancyhf{}  %清除以前对页眉页脚的设置
\fancyhead[CE]{\color{black}\xiaowuhao\CJKfamily{kai}吉林大学硕士学位论文} \fancyfoot[LE]{\thepage}    % 在book文件类别下,
\fancyhead[CO]{\color{black}\xiaowuhao\CJKfamily{kai}\leftmark} \fancyfoot[RO]{\thepage}     % \leftmark自动存录各章之章名,
%**********************************************************************************************************************************
\setlength{\abovedisplayskip}{2pt plus5pt minus1pt}     %公式前的距离
\setlength{\belowdisplayskip}{2pt plus5pt minus1pt}
%**********************************************************************************************************************************
在单输入单输出系统（Single-Input Single-Output, SISO）控制中，~PID~作为一种最经典的控制算法因其结构简单，容易理解广泛应用到各种工业场合，但是其抗干扰能力不强，而基于小波多分辨率分析的具有很好的频域分析能力，能很好得做到信噪分离，故本章利用~PID~算法结构设计出多分辨率控制器，并将其应用到传统控制中，增强控制器的抗噪能力。

%**********************************************************************************************************************************
\section{传统~PID~控制算法}
%**********************************************************************************************************************************
~PID~控制算法结构简单，许多年以来，在生产过程的自动控制领域中，控制器按照如图\ref{fig:1:PID} 所示的将偏差进行比例（P）、积分（I）和微分（D）运算后求和进行控制的。

%%*************************************************************************
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/PID.eps}
\caption{PID算法原理图} \label{fig:1:PID}
\end{figure}
%%*************************************************************************
PID~控制器是一个线性控制器，其控制规律如下式所示
\equ{\label{equ2:1:PID}
u(t) = {k_p}(e(t) + \frac{1}{{{T_I}}}\int_0^t {e(t)dt}  + {T_D}\frac{{de(t)}}{{dt}})
}
式中，$k_p$为比例系数；$T_I$为积分时间常数；$T_D$为微分时间常数。

随着计算机技术的发展，现代工业控制中，一般采用是简单快捷的基于采样控制的计算机控制系统，不同于传统硬件电路搭建的控制器，计算机控制系统只能根据设置的采样时间在每个采样时刻的获取信息值从而计算出控制量，故需要将式（\ref{equ2:1:PID}）中连续的控制算法按照采样时间进行离散化。而增量控制器需要的输入量较少，且只输出控制量的变化值，其更受各类执行机构和控制单元的青睐，故可以将连续PID 控制算法（\ref{equ2:1:PID}）以采样时刻点代表连续时间，然后按照采样时间点的偏差值累加运算近似替代积分，以差分运算近似代替微分后即可完成离散化，然后相邻两个时刻的数组相减即可得到如式（\ref{equ2:2:zPID}）所示的增量离散PID 控制算法。
\equ{\label{equ2:2:zPID}
u(k)=u(k-1)+k_p[e(k)-e(k-1)]+k_ie(k)+k_d(e(k)-2e(k-1)+e(k-2))
}
其中$k_i=k_p/T_I*T$,$k_d=k_p*T_D/T$，$T$为系统采样时间，上式也可以等效写成下式
\equ{\label{equ2:3:zPID1}
u(k) = u(k - 1) + \sum\limits_{i = 0}^2 {{k_i}e(k - i)}
}
\equ{\label{equ2:3:zPID2}
\Delta u(k) = \sum\limits_{i = 0}^2 {{k_i}e(k - i)}
}
其中${k_0} = {k_p} + {k_i} + {k_d},{k_1} =  - {k_p} - 2{k_d},{k_2} = {k_d}$。

通过上式可以看出传统的~PID~算法是对偏差信号进行线性分解然后进行加权相加后得到控制器控制输出。如果从频域角度分析传统~PID~控制算法的话，可以看出~PID~三个参数中，比例系数~$k_p$~就相当于对系统 偏差信号~$e$~的中频部分进行加权，积分系数~$k_i$~相当于是对偏差信息~$e$~的低频部分进行加权，反应的是系统控制信息的总体趋势，故可以消除系统静差，微分系数~$k_d$~相当于是对偏差信号~$e$~的高频部分进行操作，故其可以实时捕捉系统的实时变化趋势。

%**********************************************************************************************************************************
\section{多分辨率控制器结构}
%***********************************************************************************************

上节从频域角度说明了~PID~控制器对偏差信号的不同处理方法，但其表现的不够明显，也无法具体从频域相关理论对其进行说明，而小波分析具备很好的理论基础和多分辨率分析特性，故可以依据离散~PID 控制算法（\ref{equ2:3:zPID2}）的思想，将小波多分辨率分析应用其中。

根据多分辨率分析思想，可以利用小波变换将偏差信号分解到不同分辨率上，使用~Mallat~ 算法将偏差信号分解成不同分辨率的趋势信号和细节信号。小波分析产生的是一序列的中间系数，这些系数代表着原始信号在所用的基函数下的比重，也就是小波系数和尺度系数。原始信号经过尺度滤波器和小波滤波器滤波后再经过向下二采样后就能得到第一层的近似系数和细节系数，继续往下分解，近似系数就可以作为原始信号，继续进行尺度滤波器和小波滤波器的滤波从而得到第二层的近似系数和小波系数。根据自己选择的分解层数，上述的步骤可以一直重复下去。

而综合过程就类似小波~Mallat~重构算法的做法，但是不同的是我们的目的不是将原始信号进行完全重构，而是需要得到原始的各个频段的信号，这样我们可以将中间小波系数和尺度系数进行向上二采样然后分别和相应的重构滤波器进行单向重构过程， 从而获得原信号的多分辨率信号。当分解层次为~3~时，其分解综合的过程如图~\ref{fig:2:Mutiso} 所示，这样最终就能得三层分解关于原信号的近似信号~$f_H$~、细节信号~$f_L$~ 和中间分辨率的信号~$f_1$~ 和~$f_2$~。

\begin{figure}
  \centering
  \subfigure[Mallat算法多尺度分解]{
    \label{fig:subfig:a} %% label for first subfigure
    \includegraphics[width=10cm]{ch2/Mallat_De.eps}}
  \hspace{1in}
  \subfigure[Mallat算法单向重构]{
    \label{fig:subfig:b} %% label for second subfigure
    \includegraphics[width=10cm]{ch2/Mutiso.eps}}
  \caption{信号多分辨率分解}
  \label{fig:2:Mutiso} %% label for entire figure
\end{figure}

通过上述分解，可以将原始信号分解成不同分辨率进行表示
\equ{\label{equ2:4:MSr}
f(t) = {f_H}(t) + {f_{{M_1}}}(t) + .... + {f_{{M_{N - 1}}}}(t) + {f_L}(t)
}

因为小波不像傅里叶分析中的正弦和余弦那样有一个精确的频率，经过上述小波处理后的信号在频率信息上是近似的，在式（\ref{equ2:4:MSr}）分解的结果中，各个尺度分别包含了原始信号从高到低的各频率段信息，虽然是近似的频段，但由于小波变换中的小波基是正交的，故信号经过其分解后的信息量包含全频率段的信息，结果是非冗余且无遗漏的，故可以根据分解的结果有针对性地对相关频带信息进行处理。


按照传统~PID~控制器三个参数~$k_p$，$k_i$~和~$k_d$~分别是对偏差信号的不同频域信息进行加权的结构，于是在基于小波多分辨率分析的控制器设计中，也可以通过对各个分辨率上的信号进行加权后相加得到控制器的输出，具体式子如下：
\equ{\label{equ2:5:MSPID}
u = {k_H}{e_H}(t) + {k_{{M_1}}}{e_{{M_1}}}(t) + .... + {k_{{M_{N - 1}}}}{e_{{M_{N - 1}}}}(t) + {k_L}{e_L}(t)
}
也可以表示为 ~$u = \sum\limits_i {{k_i}{e_i}}$。可以看得出来其和传统~PID~控制算法形式很类似，故在此称之为多分辨率PID控制算法（Multiresolution PID,MSPID），其中~$N$~ 是~MSPID~ 控制器的分解层次。

上式只是~MSPID~控制算法的最基本形式，我们可以对其作出扩展，以表达出如下式的一般形式
\equ{\label{equ2:6:MSPID}
{u_{MSPID}} = {K_H}*{f_H}\left( {{e_H}} \right) + {K_{{M_1}}}*{f_{{M_1}}}\left( {{e_{{M_1}}}} \right) + \cdots \!+\! {K_{{M_{N \!-\! 1}}}}*{f_{{M_{N - 1}}}}\left( {{e_{{M_{N \!- \!1}}}}} \right) + {K_L}*{f_L}\left( {{e_L}} \right)
}
其中${f_i}\left( . \right)$是自由调节的一个函数，一般情况下可以根据不同的控制需求或控制场景来选择不同类型的函数如微分，积分或者非线性增益等。

与~PID~控制器不同的是，PID~控制器需要调节三个参数（$k_p$，$k_i$~和~$k_d$），而多分辨率控制器是根据误差信号的分解层数而有两个或更多的参数进行调节。例如，一层分解则会产生一个低尺度和一个高尺度成分，这样一层分解的多尺度控制器就拥有两个增益。为了获取更多的信息，如果进行两层分解，这样被分解信号就由三个部分组成，将三个部分偏差的增益函数或系数相加后就能生成控制信号。

MSPID~控制器能够减小由于外界的不确定性而造成的控制误差，通过分析~MSPID~控制器方案下对偏差信号进行多层分解后的结果，可以发现，高层分解的结果滤除掉了偏差信号中的噪声和高频信号，如果增大高层分解信号的增益，这样就能增强控制器的控制带宽，提高控制系统的抗干扰能力。而中层信号是对偏差信号的微分的近似，相对于~PID~里面的微分，其拥有更少量的噪声内容，这种相对的无噪声微分信号能够在增加控制增益的情况下增加系统的阻尼系数，这样就能提高系统的瞬态响应，最低层的信号即为滤除的噪声信号，通过调整最底层信号增益~$k_L$~为~0，这样就能产生一个相对平滑的控制信号，减少噪声对被控对象的输出造成的干扰。在实际控制中，平滑的控制输出能够提升被控对象的使用寿命从而提升整个被控对象的性能。
%**********************************************************************************************************************************
\section{单入单出多分辨率控制器的设计}
%***********************************************************************************************
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/MSPID_chart.eps}
\caption{多分辨率~PID~控制算法框图} \label{fig:3:MSPID}
\end{figure}

图~\ref{fig:3:MSPID}~展示了一个基于多尺度控制器的基本控制框图，首先，将给定的值与实际输出值进行相减得到偏差信号~$e$，将偏差信号进行相应的存储处理形成偏差信号序列，然后真的偏差信号序列进行多尺度分解各种信号分量，然后将信号分量再进行转换得到各种转换后的信号分量。这种转换方式可能包含任何可能的函数或系数，最终转换后的信号经过相加得到一个控制信号。将控制信号用以控制被控对象，以补偿偏差信号~$ e$，形成一个闭环控制。

在设计~MSPID~控制器时，还有许多问题需要注意，再将控制器应用到实际系统中，需要其有较低的运算量和好的控制效果，而输入偏差信号的小波分解过程是一个综合分析过程，需要同时兼顾最终分解效果和分解速度，这和滤波信号获取，小波基函数、分解尺度和信号长度等多个方面有关。

\vspace{15pt} \hspace{-28pt} {\bf （1）信号序列的获取}

由于小波变换是针对固定长度的信号序列，其相当于是个离线运算过程，而在实时控制时，测量的偏差信号是随着采样频率变化的实时信号，这样就需要对输入信号作缓存处理。实时数据缓存采集有如下几种方法，第一种方法就是在整个控制器采样时间固定的情况下，单独提高偏差信号的采样频率，使得在一个控制周期内，能够采集到所需求的~$N$~个数据点进行后续小波分解重构处理，然后经过单向重构就可以获得后各个分辨率的信号序列，但是此方法的缺点是对输入数据采集装置要求较高，当控制系统的控制周期时间比较短而采集数据数~N~ 比较大时，这时候采样频率就会过大，这就要求数据采集设备有很高采样频率及好的采样性能，从而提高了采样设备的成本。第二种方法就不需要加大数据采集装置的采样频率，设置数据采集频率和系统控制采样周期相同，采用浮动数据缓存窗的办法，首先设定数据缓存的长度~$N$，假设在第~$k$~ 个采样周期得到的数据为~$x(k)$，这个时候数据缓存窗中数据即为~$x(k-N+1),x(k-N+2),…x(k-1),x(k)$，在下一个周期~$k+1$~，数据采用先入先出的思想，数据缓存窗中的数据即为~$x(k-N+2),x(k-N+1),…x(k),x(k+1)$~，即始终保证数据缓存窗中的数据长度为~$N$~，但是由于在小波分解~Mallat~快速算法中，存在边界效应，会导致经过小波分解后综合的结果的边界信号有很大的失真，而在上述的数据缓存窗结构中，最新时刻的信号即为边界信号，这样会最终导致经分解重构后的信号存在失真，从而影响控制效果，消除小波变换边界效应较好的方法是采用平移不变的小波变换算法，但是这种算法相对于~Mallat~算法来说，计算量会成倍增加，这在实时控制系统中会增大控制器的运算负担。故可以对上述数据缓存窗的结构加以改进，来削弱~Mallat~ 快速算法中的边界效应，其方法是将最新时刻得到的测量数据放置在数据缓存窗中间“保护”起来，而最新时刻的测量数据两边都是前面时刻测量的时刻，形成一个如图~\ref{fig2:4:Data}~所示的对称结构，故改进后的对称数据缓存窗的具体建立方法如下：

1)	选择合适的数据缓存的长度~$N$~；

2)	初始数据缓存为~0，在当前采样时刻，当前数据以流水线形式先入先出方式进入缓存；

3)	将缓存的数据进行镜像存储，最新数据靠近缓存中心，即设在~$k$~时刻的测量值为~$x(k)$ ，经对称添加形成的数据缓存窗数据为 $x(k - N + 1)$,...，$x(k - 2)$ ，$x(k - 1)$ ,$x(k)$ ,$x(k)$ ,$x(k - 1)$ ,$x(k - 2)$,..., $x(k - N+1)$。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/Data.eps}
\caption{对称数据缓存窗结构} \label{fig2:4:Data}
\end{figure}

此种方法既不需要提高数据采样频率，又能避免由于~Mallat~快速算法的边界效应带来的巨大影响，故本设计采取这种对称的数据缓存窗结构来产生数据序列。

\vspace{15pt} \hspace{-28pt} {\bf （2）小波基的选择}

一般来说在其选择过程是根据实际应用中信号函数的正则性、小波函数的消失矩阶数和支撑的大小进行确定的。故此处需要选择合适的小波基，使其既能兼顾特定的分析目标如能将控制输入偏差信号中的噪声信号准确的提取出来，又能保证分解过程的实时性。一般来说，小波的消失矩越小，其运算量就越小，但是短消失矩的小波难以得到好的分解结果，对控制输入信号的多分辨率分解中高频信号的提取难以达到预期的效果，故需要同时兼顾这两方面进行小波基的选择，一般希望所选择的小波需要有对称性或反对称性以避免重构信号失真，同时还需要其支撑矩不要过长以避免太大的运算负担，再者还需要小波基要有正交性以便于用~Mallat~ 快速算法和较高的消失矩以达到好的分解效果。当然上述有些方面是相互矛盾的，从上述条件中可以将小波基的选择限制在~Symmlets~，~Daubechies~或~Coiflets~小波。而文献\cite{coifman1992entropy} 从数学角度提出一种计算不同小波基的针对不同信号分解的分解性能算法，其从信号的熵信息角度去衡量小波基的效率，其定义信号 $x = \{ x(n)\}  = \{ x(0),x(1),...,x(N - 1)\} $ 的熵为
\[H(x) =  - \sum\limits_n^{N - 1} {{{\left| {x(n)} \right|}^2}\log {{\left| {x(n)} \right|}^2}} \]

这样最优的小波基即为使信号经过分解到不同分辨率的信号的熵综合最小，及为$\mathop {\min }\limits_D \sum\limits_j {H(x)}$  ，其中~$D$~为待选择的小波基集和，$j$~为小波分解的层次。

\vspace{15pt} \hspace{-28pt} {\bf （3）信号的长度和小波分解的层数}

在分辨率~PID~控制器的设计中，系统的控制输入是通过小波分解后进行加权得到的，也就是说输入的偏差信号的信息影响着控制器的输出，当信号的数据窗的长度很大时，这个时候待分解的信号所包含的信息就越丰富，这样经过分解后的各个分辨率的信号就越准确，但是如果数据窗的长度过长，在某种情况下，会导致控制器的输出有信息延迟现象，这样的话会影响到实时控制的效果，且数据越多，小波变换的计算量也会越大，这样会增大控制器的计算负担。而分解层次的选择则会影响分解数据的精度，分解层次越多，就越能将输入的偏差信号序列精细化，这样也有利于后期的滤波处理，但是过多的分解层次一方面来说会造成后期多分辨率PID要调节的参数增多，前面说到，当分解层次为~2~ 时，即将信号分解到高、中、低三个频段，这个时候待调节的参数即为各个频段的信号的加权系数，调节的数目为3，和常规的PID参数一样。而当分解层次为~3 ~时，此时将信号分解到四个不同频段，相应的待调节的参 数的数目即为4，当分解层次为N时，此时待调节的参数的数目为~N+1，所以如果分解层次过多，这样会提高后期参数调节的复杂性；另一方面，分解层次的增多，会造成信号在分解和重构后出现失真，而且也会增大小波分解和综合过程的计算量。参考文献\cite{percival2006wavelet}可得出一般分解层次~$S$~和信号长度~$N$~、 小波滤波器长度~$F$~应该满足以下不等式关系
\[S \le {\log _2}(\frac{{2*N - 1}}{{F - 1}} + 1)\]

\vspace{15pt} \hspace{-28pt} {\bf （4）小波变换信号的边界延拓}

在小波变换实际工程应用中，~Mallat~算法应用很广泛，但是~Mallat~算法中的卷积操作针对的对象是无限长度的输入序列，这样才能保证小波变换后的各个分辨率的数据量和输入信号相同。但是在实际应用中，数据信号是有限的，故需要对信号的两端进行相应的延拓，以保证卷积操作的正常进行，也正是由于有边界延拓问题，才会导致前文所述的小波变换边界失真，虽说前文的对称的数据缓存窗就是为了降低边界失真问题，但是由于在控制系统中数据的长度比在信号处理领域中信号的长度短的多，即使将最新的数据放在窗中间进行“保护”起来，边界效应也有可能对其有影响到。而且在某些应用场合，控制器的需求不仅仅是当前时刻的信号量，也需要对过去时刻的信号进行分析处理，而不同的延拓方法对分解结果有不同的影响，故需要对信号的边界延拓方法进行相应的选择。一般常见的边界延拓方法包括：零延拓、周期延拓、周期对称延拓、光滑常数延拓、平滑延拓。在不同的延拓方法下，延拓信号经高通滤波器和低通滤波器后的信号的特性不同，一般来说，平滑延拓的方式经过分解后最终的信号偏差量较小，但是平滑延拓需要对原信号进行操作有额外的运算开销，如线性延拓就需要做一次乘法和一次减法，而抛物线延拓需要额外的三次乘法和一次减法，额外的运算开销在实时控制系统中是十分敏感的，而其他的延拓方法是对信号直接进行操作，不需要额外的运算，一般情况下周期对称延拓也能很好的削弱输出序列的边界不连续，可以防止信号的高频系数较大~\textsuperscript{\cite{houzx2009}}，故一般在多分辨率~PID~控制算法中采用周期对称的延拓方式。
%***********************************************************************************************************************************
\section{应用验证}
%***********************************************************************************************************************************
直流有刷电机是内含电刷装置的直流电能与机械能相互转换的旋转电机。其是近代工业首个重要的机械载荷电力驱动装置，直流有刷电机控制系统也发展近百年，广泛应用在各种工业控制系统中。

直流有刷电机内部的电刷装置是用来引入或引出直流电压或直流电流，直流有刷电机是所有电机的基础，它具有启动快，制动及时，可在大范围内平滑地调速、控制电路相对简单等特点，直流有刷电机的转速可以通过改变工作电压或磁场强度来进行控制，目前改变直流有刷电机的转速的最有效的方法就是采用脉宽调制技术(Pulse Width Modulation, PWM)，通过控制~PWM~信号的脉冲宽度，即控制~PWM~的占空比来控制电机转速。

而在电机转速控制中会存在有许多的噪声和干扰，首先是直流电机的非线性因素，电机内部的电枢的内阻会随着电机温度的非线性变化，还有就是电机内部摩擦力矩随转速的非线性变化，这些尤其是在电机处于低速区运转时体现明显，其次就是来自电机外部的传感器噪声的影响。这些噪声和干扰影响着电机转速控制的精准性，故需要设计个具有降噪效果的控制器，而上节分析的多分辨率~PID~控制器具有很好的降噪效果，故可将多分辨率~PID~控制器应用在直流有刷电机的转速控制上。
%***********************************************************************************************************************************
\subsection{直流无刷电机的建模}
%***********************************************************************************************************************************
虽然多分辨率PID控制算法不是一种基于模型的算法，但是对被控对象的建模可以帮助分析其信号的组成和离线仿真调试。

直流有刷电机的基本构造的组件包括定子、转子、电刷和换向器。定子和转子磁场相互作用驱动电机旋转。
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch2/motor.eps}
\caption{直流电机结构图} \label{fig2:5:motor}
\end{figure}

直流电机的等效电路图如图~\ref{fig2:6:motor_cir}~所示，
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch2/motor_cir.eps}
\caption{直流电机等效电路图} \label{fig2:6:motor_cir}
\end{figure}
其包含式（\ref{equ2:7:volte}）所示的电压平衡方程
\equ{\label{equ2:7:volte}
{L_a}{\dot i_a} = {V_{bat}}u - {R_a}{i_a} - {k_v}\omega
}
和式（\ref{equ2:8:torque}）所示的转矩平衡方程
\equ{\label{equ2:8:torque}
{J_m}\dot \omega  = {k_t}{i_a} - {T_{ml}} - {T_{fmap}}(\omega ) - {T_{cog}}
}
其中 ~${L_a}$~为电枢电感，~${i_a}$~ 为电枢电流，~$V_{bat}$~ 为电源电压， ~$u$~为占空比输入， ~$R_a$~ 为电枢电阻， ~$k_v$~ 为反电动势系数， ~$\omega$~ 为电机旋转角速度，~$J_m$~  为电机的转动惯量， ~$k_t$~为电机的转矩系数，~$T_{ml}$~   为电机的负载力矩，~$T_{fmap}$~  为电机的摩擦力矩，其是电机转速的函数，~$T_{cog}$~  为齿槽转矩。

在无负载和低转速的条件下，摩擦力矩和齿槽转矩的存在对电机转速的精确控制产生很大的影响，摩擦转矩有很大的非线性特性，在控制中会影响到稳态误差，而且其建模过程十分复杂。但实际上，针对不同的电机状态，摩擦力矩的特性仍有很大的偏差，故针对在本设计所使用的直流电机，通过实物数据采集制作出一张电机摩擦力矩和转速关系的数据表用于仿真实验中，如图~\ref{fig2:7:frictionmap}~所示
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch2/frictionmap.eps}
\caption{电机摩擦力矩表} \label{fig2:7:frictionmap}
\end{figure}

故可以借助式（\ref{equ2:7:volte}）（\ref{equ2:8:torque}）和图（\ref{fig2:7:frictionmap}）展示的摩擦力矩表在~MATLAB~中建立直流电机模型，这样就可以针对该模型设计出~MSPID~ 控制器来验证控制器的有效性和抗干扰性能。
%***********************************************************************************************************************************
\subsection{控制器离线仿真验证}
%***********************************************************************************************************************************
针对电机转速控制的系统控制框图如图~\ref{fig2:8:MSPIDcontrolchart}~ 所示，其中~$r$~ 为参考转速，$d$~ 为输入信号端噪声，系统的控制目标为在有干扰的情况下时电机的转速能稳定跟踪上给定的转速。前文分析过，直流电机运转在低速区时，噪声对其速度控制有很大的干扰，故在仿真中跟踪给定的低转速~$1rad/s$~ 来验证控制器的抗噪能力。
\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch2/MSPIDcontrolchart.eps}
\caption{MSPID控制框图} \label{fig2:8:MSPIDcontrolchart}
\end{figure}

\begin{figure}[htb]
\centering
\includegraphics[width=12cm]{ch2/DB2.eps}
\caption{“db2”小波的尺度函数和小波函数} \label{fig2:15:DB2}
\end{figure}
本次~MSPID~控制器的小波基选择为四阶的“Daubechies”小波，也就是“db2”小波，“db2”小波的尺度函数和小波函数如图~\ref{fig2:15:DB2}~所示。通过~MATLAB~工具箱在~MATLAB~界面输入$"wfilters('db2')"$ 即可以离线求出“db2” 小波的滤波器组系数如表~\ref{tb:1:db2}~所示。除此之外，通过设置信号分解层次~$S=3$~和带分解信号长度~$N=32$~ 来进行控制器的设计与验证 。

\begin{table}[hbt]
\begin{center}
\caption{ ‘db2’小波滤波器组参数}\label{tb:1:db2}
%\begin{tabular}{p{2cm}<{\centering}||p{1cm}<{\centering}|p{1cm}<{\centering}|p{1cm}<{\centering}|p{1cm}<{\centering}}
\begin{tabular}{p{2cm}<{\centering}||c|c|c|c}
\hline\hline
% $h$      & $\tan {\theta ^i} = {2^{ - i}}$     & 旋转角度
%  \\\hline
 $h$           & -0.1294         & -0.2241     &0.8365   &-0.4830  \\
 $g$           & 0.4830      &0.8365   &0.2241  &-0.1294             \\
 $\bar h$      & -0.1294    &0.2241   &0.8365  &0.4830               \\
 $\bar g$          &-0.4830	&0.8365	&-0.2241	&-0.1294    \\
\hline\hline
\end{tabular}
\end{center}
\end{table}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
首先在正常情况下，控制器输入端不人为添加噪声，通过离线测试，调整各个参数的值以达到好的控制效果，最终得到其各个分辨率的加权参数如表~\ref{tb:2:MSPIDpa}~所示，类似作为对比加入普通~PID~ 控制器对直流电机低转速跟踪进行控制，其参数如表~\ref{tb:3:PIDpa}~所示。最终实验结果对比如图~\ref{fig2:8:y_nonoise}~和图~\ref{fig2:8:y_nonoise}~所示，其中图~\ref{fig2:8:y_nonoise}~ 展示的是电机的转速输出，图~\ref{fig2:9:u_nonoise}~展示的是控制器的输出量，可以发现两个控制器的控制效果差不多。
\begin{table}[hbt]
\begin{center}
\caption{ ~MSPID~控制器参数值}\label{tb:2:MSPIDpa}
\begin{tabular}{p{3cm}<{\centering}|p{3cm}<{\centering}|p{3cm}<{\centering}|p{3cm}<{\centering}}
\hline\hline
% $h$      & $\tan {\theta ^i} = {2^{ - i}}$     & 旋转角度
%  \\\hline
$ k_H$	&$k_{m2}$	&$k_{m1}$	&$k_L$  \\
\hline
 0.07	&-0.15	&0.01	&0   \\
\hline\hline
\end{tabular}
\end{center}
\end{table}
\begin{table}[hbt]
\begin{center}
\caption{ ~PID~控制器参数值}\label{tb:3:PIDpa}
\begin{tabular}{p{3cm}<{\centering}|p{3cm}<{\centering}|p{3cm}<{\centering}}
\hline\hline
% $h$      & $\tan {\theta ^i} = {2^{ - i}}$     & 旋转角度
%  \\\hline
$ k_p$	&$k_i$	&$k_d$  \\
\hline
 0.1	&0.95	&0   \\
\hline\hline
\end{tabular}
\end{center}
\end{table}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/y_nonoise.eps}
\caption{无噪声情况下电机转速控制输出} \label{fig2:8:y_nonoise}
\end{figure}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/u_nonoise.eps}
\caption{无噪声情况下控制器控制输出} \label{fig2:9:u_nonoise}
\end{figure}


为了验证多分辨率控制器相对于普通~PID~控制器的抗噪能力，接着在输入端加入如图~\ref{fig2:10:noise} 所示的白噪声信号，在不改变~MSPID~参数和普通~PID~控制算法参数的情况下重新进行实验验证，实验结果如图~\ref{fig2:11:y_noise}，图~\ref{fig2:12:u_noise}  所示。
\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/noise.eps}
\caption{输入随机噪声} \label{fig2:10:noise}
\end{figure}
\newpage
\thispagestyle{empty}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/y_noise.eps}
\caption{含噪声情况下电机转速控制输出} \label{fig2:11:y_noise}
\end{figure}
\newpage
\thispagestyle{empty}

\begin{figure}[htb]
\centering
\includegraphics[width=15cm]{ch2/u_noise.eps}
\caption{含噪声情况下控制器控制输出} \label{fig2:12:u_noise}
\end{figure}

可以发现在加入白噪声信号后，普通的~PID~控制算法控制输出出现比较大的抖动，其控制器的输出也存在很大的噪声，而多尺度~PID~控制算法在控制上和不加噪声干扰的情况相似，并没有出现更多的变化，且控制器输出也较稳定。这里主要因为多尺度~PID~控制器的参数在最低尺度的加权参数设为~0，即将输入信号的高频噪声滤除掉，故可以发现多尺度~PID~控制效果并没出现多大变化，而普通~PID~ 控制算法的抗干扰能力就没那么强，故会出现控制效果变差的情况。由此可以发现多尺度~PID~控制算法能够根据不同的工况在考虑信号频谱的情况下进行控制器的设计。

而具体分析下输入信号的在不同分辨率下的组成情况，如图~\ref{fig:5:wavelet_compe}所示，图中~$f_H$~ 属于输入信号的低频组成部分，~$f_2$~属于最高层的高频组成，分解层次越高，这些细节信号包含的高频越少，可认为是信号的一种低频组成，~$f_L$~和$f_1$则是信号的高频组成。通过曲线显示，可以发现小波多分辨率分解中的高频部分能把信号的噪声信号很好提取出来，其低频组成就相对光滑许多，包含信号更多的原始信息。
\begin{figure}
  \centering
  \subfigure[信号的低频组成部分]{
    \label{fig:subfig:a} %% label for first subfigure
    \includegraphics[width=15cm]{ch2/fH&f2.eps}}
  \hspace{1in}
  \subfigure[信号的高频组成部分]{
    \label{fig:subfig:b} %% label for second subfigure
    \includegraphics[width=15cm]{ch2/f1&fL.eps}}
  \caption{信号多分辨率分解}
  \label{fig:5:wavelet_compe} %% label for entire figure
\end{figure}

%***********************************************************************************************************************************
\section{本章小结与展望}
%***********************************************************************************************************************************
本章通过从频域角度分析传统~PID~控制算法，从而引出小波多分辨率控制器。小波多分辨率控制器通过将控制偏差信号进行小波分解，得到偏差信号的不同分辨率信息，然后通过对不同分辨率的偏差信息进行加权操作，最终得到系统的控制量，其通过调整各个分辨率的偏差信号加权参数的大小，从而获得控制器的不同特性。

然后本章将多分辨率~PID~控制器运用到电机转速跟踪降噪控制中，详细说明了控制器设计过程中需要调整和注意的地方，如信号选取过程、小波函数、分解尺度和信号长度的选择等方面，说明了各个方面对控制器的不同影响，最终选择了合适的方案和参数完成多分辨率~PID~控制器的设计。为了验证控制器的有效性和抗干扰性能，针对电机的控制加入了普通~PID~算法进行对比，最终完成了电机转速跟踪控制的~MATLAB~仿真实验，实验结果表明基于小波分解的多分辨率~PID~有很好的抗干扰能力，最终通过分析输入信号经小波分析后的各个分辨率组成，也验证了多分辨率~PID~控制算法的去噪能力。

当然本章设计的多分辨率~PID~控制器还有需要提高的地方，众所周知，在传统PID控制器中，需要来回调试比例、积分和微分三个参数进行参数整定，由于这三个参数是相互耦合的，一般情况下，为了得到更好的控制效果，需要进行多次来回重复调试，这一过程是困难且耗时的。这一问题也存在与多分辨率~PID~控制中，而且由于多分辨率~PID~控制器的参数随着小波分解层次的增加而增加，在一般三层小波分解的情况下，也有四个参数需要整定，在有些系统为了获得更好的抗干扰性能，小波分解的层次会得到进一步的增加，这样就有更多的参数需要整定，这一过程是繁琐复杂且耗时的，在传统~PID~ 控制器的参数整定中，很多学者都从优化的角度将现代一些优化算法比如粒子群算法、遗传算法等应用到参数整定中，以此完成控制器的参数自整定~\textsuperscript{\cite{huanhePID} \cite{wangjies2005}}，故也可以按照此思路设计出多分辨率PID 控制器的参数自整定算法，这也是今后值得研究的地方。

\newpage
\thispagestyle{empty}
\cleardoublepage
